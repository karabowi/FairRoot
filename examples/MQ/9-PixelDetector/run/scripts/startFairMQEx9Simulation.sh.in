#!/bin/bash

NOFEVENTS="--nof-events -1"
NOFSIMULS="--nof-simuls 1"
TRANSPORTNAME="TGeant3"
TRANSPORT="--transport zeromq"
WORKDIR="@EXAMPLE9_FILE_LOCATION@"
VERBOSE="--verbosity DEBUG"
FORCEKILL=false

CONTROL=""
#CONTROL="--control static --log-color false"
DATESTRING=`date +%Y%m%d_%H%M%S`

while [[ $# > 1 ]]
do
key="$1"

case $key in
    -n|--nof-events)
    NOFEVENTS="--nof-events $2"
    shift
    ;;
    -s|--nof-simuls)
    NOFSIMULS="--nof-simuls $2"
    shift
    ;;
    -g|--transport-name)
    TRANSPORTNAME="$2"
    shift
    ;;
    -t|--transport)
    TRANSPORT="--transport $2"
    shift
    ;;
    -w|--work-dir)
    WORKDIR="$2"
    shift
    ;;
    -v|--verbose)
    VERBOSE="--verbosity $2"
    shift
    ;;
    -k|--force-kill)
    FORCEKILL="$2"
    shift
    ;;
esac
shift 
done

if [ "$TRANSPORTNAME" != "TGeant4" ]; then
    TRANSPORTNAME="TGeant3";
fi


CHECK_BEFORE="$(ps -fea | grep Pixel9MQConfig_Simulation.json | grep "transport" | grep "control" | grep -v grep)"
if [ -n "$CHECK_BEFORE" ];
then
    echo "some example/MQ/9-Pixel programs are still running:"
    echo $CHECK_BEFORE
    echo "quit them before proceeding."
    if [ "$FORCEKILL" == "true" ];
    then
        echo "trying to kill..."
        ps -fea | grep Pixel9MQConfig_Simulation.json | grep "transport" | grep "control" | grep -v grep | awk '{print $2}' | xargs kill -9
    else
        return;
    fi
fi

########################### Define some variables
# JSON file containing the configuration parameters of all FairMQ devices of this example
MQCONFIGFILE="$WORKDIR/examples/MQ/9-PixelDetector/run/options/Pixel9MQConfig_Simulation.json"
# ASCII and ROOT parameter files for the processor device
OUTPUTPARAM="$WORKDIR/examples/MQ/9-PixelDetector/macros/MQ.simulation_$TRANSPORTNAME.pars.root"
OUTPUTFILE="$WORKDIR/examples/MQ/9-PixelDetector/macros/MQ.simulation_$TRANSPORTNAME.data.root"
###########################

TRANSPORTNAME="--transport-name $TRANSPORTNAME"

########################### Check if files exist
if [ ! -e $MQCONFIGFILE ] ; then
    echo "MQConfig file ($MQCONFIGFILE) does not exist!"
    exit;
fi

########################### Start the chain of the devices


########################## start Parameter server
SERVER="@FAIRROOT_BIN_LOCATION@/"
SERVER+="parmq-server $TRANSPORT"
SERVER+=" --id parmq-server  --mq-config $MQCONFIGFILE"
SERVER+=" $VERBOSE "
SERVER+=" --update-channel-name updateChannel --output-name $OUTPUTPARAM $CONTROL"

########################## start SAMPLER
SAMPLER="@EXAMPLE9_BIN_LOCATION@/"
SAMPLER+="run-sim $TRANSPORT"
SAMPLER+=" --config-key sampler  --mq-config $MQCONFIGFILE"
SAMPLER+=" $VERBOSE "
SAMPLER+=" $NOFEVENTS $TRANSPORTNAME $CONTROL"

SAMPLER1=$SAMPLER+" --id processor1"
SAMPLER2=$SAMPLER+" --id processor2"
SAMPLER3=$SAMPLER+" --id processor3"
SAMPLER4=$SAMPLER+" --id processor4"
SAMPLER5=$SAMPLER+" --id processor5"
SAMPLER6=$SAMPLER+" --id processor6"
SAMPLER7=$SAMPLER+" --id processor7"
SAMPLER8=$SAMPLER+" --id processor8"

########################## start FILESINK
FILESINK="@EXAMPLE9_BIN_LOCATION@/"
FILESINK+="ex9-sink $TRANSPORT --in-channel data#all#"
FILESINK+=" $VERBOSE "
FILESINK+=" --id sink1 --mq-config $MQCONFIGFILE"
FILESINK+=" --class-name FairMCEventHeader --branch-name MCEventHeader."
FILESINK+=" --class-name TClonesArray(PixelPoint) --branch-name PixelPoint"
FILESINK+=" --class-name TClonesArray(FairMCTrack) --branch-name MCTrack"
FILESINK+=" --file-name $OUTPUTFILE"

########################## run all
xterm -geometry 80x50+0+0 -hold -e $SERVER &
xterm -geometry 80x50+1000+0 -hold -e $FILESINK &
xterm -geometry 80x50+500+0 -hold -e $SAMPLER1 &
xterm -geometry 80x50+500+0 -hold -e $SAMPLER2 &
xterm -geometry 80x50+500+0 -hold -e $SAMPLER3 &
xterm -geometry 80x50+500+0 -hold -e $SAMPLER4 &
